1. Shows each employee's salary and the total salary of their department.

SELECT 
    name, 
    department, 
    salary, 
    SUM(salary) OVER (PARTITION BY department) AS total_salary_in_department
FROM employees;


2. Count the number of employees in each department.

SELECT 
    name, 
    department, 
    COUNT(*) OVER (PARTITION BY department) AS employee_count_in_department
FROM employees;

3. Display the minimum salary in each department alongside each employee.

SELECT 
    name, 
    department, 
    salary, 
    MIN(salary) OVER (PARTITION BY department) AS min_salary_in_department
FROM employees;

4. Display the maximum salary in each department alongside each employee.

SELECT 
    name, 
    department, 
    salary, 
    MAX(salary) OVER (PARTITION BY department) AS max_salary_in_department
FROM employees;

5. Assign a unique number to employees within each department, ordered by salary.

SELECT 
    name, 
    department, 
    salary, 
    ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) AS row_number_in_department
FROM employees;

6. Rank employees within each department by their age.

SELECT 
    name, 
    department, 
    salary, 
    RANK() OVER (PARTITION BY department ORDER BY age DESC) AS rank_in_department
FROM employees;

7. Assign dense ranks to employees within each department by their salary.

SELECT 
    name, 
    department, 
    salary, 
    DENSE_RANK() OVER (PARTITION BY department ORDER BY age DESC) AS dense_rank_in_department
FROM employees;

8. Divide employees into 2 buckets (groups) within each department based on their salary.

SELECT 
    name, 
    department, 
    salary, 
    NTILE(2) OVER (PARTITION BY department ORDER BY salary DESC) AS bucket
FROM employees;

9. Determine each employee's salary and identify the salary of the employee earning just below them.

SELECT 
    name, 
    department, 
    salary, 
    LAG(salary) OVER (PARTITION BY department ORDER BY salary) AS previous_salary
FROM employees;

10. Determine each employee's salary and identify the salary of the employee earning just above them.

SELECT 
    name, 
    department, 
    salary, 
    LEAD(salary) OVER (PARTITION BY department ORDER BY salary) AS next_salary
FROM employees;


11. Display the smallest salary in each department.

SELECT 
    name, 
    department, 
    salary, 
    FIRST_VALUE(salary) OVER (PARTITION BY department ORDER BY salary) AS first_salary
FROM employees;

12. Display the highest salary in each department.

SELECT 
    name, 
    department, 
    salary, 
    LAST_VALUE(salary) OVER (PARTITION BY department ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_salary
FROM employees;


